{"version":3,"sources":["index.js"],"names":["Square","props","squareClass","winningSquare","className","id","onClick","value","Board","i","this","squares","winningSquares","includes","x","j","gameRows","max","row","push","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","winner","Game","state","history","Array","fill","col","stepNumber","xIsNext","sortOrder","handleSort","bind","event","setState","target","slice","current","Math","floor","concat","step","status","confetti","winningCalculation","moves","map","move","desc","active","Row","Cell","selectable","jumpTo","reverse","fluid","content","color","label","basic","labelPosition","nextPlayerColor","columns","isMobile","as","icon","alignment","name","align","Subheader","Column","handleClick","Group","placeholder","selection","onChange","options","key","text","celled","Body","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db57318d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Confetti from 'react-confetti';\r\nimport {Button, Container, Dropdown, Grid, Header, Icon, Segment, Table} from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport {isMobile} from 'react-device-detect';\r\n\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    let squareClass = 'square';\r\n    if (props.winningSquare) {\r\n        squareClass += ' winner';\r\n    }\r\n    return (\r\n        <button className={squareClass} id={props.id} onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                key={i}\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n                winningSquare={this.props.winningSquares.includes(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let gameRows = [];\r\n        let x, j, max = 0;\r\n        for (x = 0; x < 3; x++) {\r\n            let row = [];\r\n            for (j = 0; j < 3; j++) {\r\n                row.push(this.renderSquare(max));\r\n                max++;\r\n            }\r\n            gameRows.push(<div className=\"board-row\" key={x + 1}>{row}</div>);\r\n        }\r\n\r\n\r\n        return (\r\n\r\n            <div className=\"squaresHolder\">\r\n                {gameRows}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return {winningSquares: lines[i], winner: squares[a],};\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                row: 0,\r\n                col: 0,\r\n                winner: '',\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            sortOrder: \"Asc\",\r\n        };\r\n\r\n        this.handleSort = this.handleSort.bind(this);\r\n    }\r\n\r\n    handleSort(event) {\r\n        this.setState({sortOrder: event.target.value});\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        if (calculateWinner(current.squares) || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        let row = Math.floor(i / 3) + 1;\r\n        let col = (i + 1) % 3;\r\n        if (col === 0) {\r\n            col = 3;\r\n        }\r\n        this.setState({\r\n            history: history.concat([{squares: squares, col: col, row: row}]),\r\n            xIsNext: !this.state.xIsNext,\r\n            stepNumber: history.length,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        const current = this.state.history.slice(0, step + 1);\r\n\r\n        this.setState({\r\n            history: current,\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history.slice();\r\n        const current = history[this.state.stepNumber];\r\n        const winningCalculation = calculateWinner(current.squares);\r\n        const winningSquares = winningCalculation ? winningCalculation.winningSquares : [];\r\n        let moves = history.map((step, move) => {\r\n            const desc = move ? 'Go to move #' + move + '\\n(row: ' + step.row + ', col: ' + step.col + ')' : 'Go to game start';\r\n\r\n            const active = move === history.length - 1 ;\r\n            return (<Table.Row key={move} active={active}><Table.Cell selectable  key={move + '-' + step.row + '-' + step.col}\r\n                                                      onClick={() => this.jumpTo(move)}>{desc}</Table.Cell></Table.Row>)\r\n        });\r\n\r\n        moves = (this.state.sortOrder === \"Asc\" ? moves : moves.reverse());\r\n\r\n        let status;\r\n        let confetti;\r\n        if (winningCalculation) {\r\n            status = (<Button\r\n                fluid\r\n                content='Winner'\r\n                color='orange'\r\n                label={{basic: true, content: (winningCalculation.winner), color: 'orange'}}\r\n                labelPosition='right'\r\n            />);\r\n            confetti = <Confetti/>\r\n        } else if (!current.squares.includes(null)) {\r\n            status = (<Button\r\n                fluid\r\n                content='The game has ended in a draw.'\r\n                color='purple'\r\n            />);\r\n        } else {\r\n            const nextPlayerColor = this.state.xIsNext ? 'blue' : 'red';\r\n            status = (\r\n                <Button\r\n                    fluid\r\n                    content='Next Player'\r\n                    color={nextPlayerColor}\r\n                    label={{basic: true, content: (this.state.xIsNext ? 'X' : 'O'), color: nextPlayerColor}}\r\n                    labelPosition='right'\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Container className=\"gameContainer\">\r\n                {confetti}\r\n\r\n                <Grid columns={isMobile ? 1 : 3}>\r\n                    <Grid.Row>\r\n                        <Header as='h2' icon alignment='center'>\r\n                            <Icon name='gamepad' align='center'/>\r\n                            Tic Tac Toe\r\n                            <Header.Subheader>\r\n                                Will you win against your foe?\r\n                            </Header.Subheader>\r\n                        </Header>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        {isMobile ? null : <Grid.Column></Grid.Column>}\r\n                        <Grid.Column>\r\n                            <div className=\"game-board\">\r\n                                <Board squares={current.squares} winningSquares={winningSquares}\r\n                                       onClick={(i) => this.handleClick(i)}/>\r\n                            </div>\r\n                        </Grid.Column>\r\n                        {isMobile ? null : <Grid.Column></Grid.Column>}\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        {isMobile ? null : <Grid.Column></Grid.Column>}\r\n                        <Grid.Column >\r\n                            <Segment.Group >\r\n                                <Segment >\r\n                                    {status}\r\n                                </Segment>\r\n                                <Segment >\r\n                                    <Button\r\n                                        fluid\r\n                                        content='Game History'\r\n                                        icon='history'\r\n                                        label={{basic: true, content: moves.length - 1}}\r\n                                        labelPosition='right'\r\n                                    />\r\n                                </Segment>\r\n                                <Segment >\r\n                                    <Dropdown\r\n                                        placeholder='Select Sort Order'\r\n                                        fluid\r\n                                        selection\r\n                                        value={this.state.sortOrder}\r\n                                        onChange={this.handleSort}\r\n                                        options={[{key: \"Asc\", text: \"Ascending\", value: \"Asc\"},\r\n                                            {key: \"Desc\", text: \"Descending\", value: \"Desc\"}]}\r\n                                    />\r\n                                </Segment>\r\n                                <Segment >\r\n                                    <Table celled>\r\n                                        <Table.Body>\r\n                                        {moves}\r\n                                        </Table.Body>\r\n                                    </Table>\r\n                                </Segment>\r\n                            </Segment.Group>\r\n                        </Grid.Column>\r\n                        {isMobile ? null : <Grid.Column></Grid.Column>}\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game/>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}